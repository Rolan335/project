// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=../../mocks/blogrepository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/Rolan335/project/internal/model"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockBlogRepository is a mock of BlogRepository interface.
type MockBlogRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBlogRepositoryMockRecorder
	isgomock struct{}
}

// MockBlogRepositoryMockRecorder is the mock recorder for MockBlogRepository.
type MockBlogRepositoryMockRecorder struct {
	mock *MockBlogRepository
}

// NewMockBlogRepository creates a new mock instance.
func NewMockBlogRepository(ctrl *gomock.Controller) *MockBlogRepository {
	mock := &MockBlogRepository{ctrl: ctrl}
	mock.recorder = &MockBlogRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlogRepository) EXPECT() *MockBlogRepositoryMockRecorder {
	return m.recorder
}

// AddBlog mocks base method.
func (m *MockBlogRepository) AddBlog(ctx context.Context, blog model.DbBlog) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBlog", ctx, blog)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBlog indicates an expected call of AddBlog.
func (mr *MockBlogRepositoryMockRecorder) AddBlog(ctx, blog any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBlog", reflect.TypeOf((*MockBlogRepository)(nil).AddBlog), ctx, blog)
}

// AddPost mocks base method.
func (m *MockBlogRepository) AddPost(ctx context.Context, post model.DbPost) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPost", ctx, post)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPost indicates an expected call of AddPost.
func (mr *MockBlogRepositoryMockRecorder) AddPost(ctx, post any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPost", reflect.TypeOf((*MockBlogRepository)(nil).AddPost), ctx, post)
}

// DeleteBlog mocks base method.
func (m *MockBlogRepository) DeleteBlog(ctx context.Context, blogID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlog", ctx, blogID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBlog indicates an expected call of DeleteBlog.
func (mr *MockBlogRepositoryMockRecorder) DeleteBlog(ctx, blogID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlog", reflect.TypeOf((*MockBlogRepository)(nil).DeleteBlog), ctx, blogID)
}

// DeletePost mocks base method.
func (m *MockBlogRepository) DeletePost(ctx context.Context, postID, blogID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", ctx, postID, blogID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockBlogRepositoryMockRecorder) DeletePost(ctx, postID, blogID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockBlogRepository)(nil).DeletePost), ctx, postID, blogID)
}

// GetBlog mocks base method.
func (m *MockBlogRepository) GetBlog(ctx context.Context, blogID uuid.UUID) (model.DbBlog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlog", ctx, blogID)
	ret0, _ := ret[0].(model.DbBlog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlog indicates an expected call of GetBlog.
func (mr *MockBlogRepositoryMockRecorder) GetBlog(ctx, blogID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlog", reflect.TypeOf((*MockBlogRepository)(nil).GetBlog), ctx, blogID)
}

// GetPost mocks base method.
func (m *MockBlogRepository) GetPost(ctx context.Context, postID uuid.UUID) (model.DbPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", ctx, postID)
	ret0, _ := ret[0].(model.DbPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockBlogRepositoryMockRecorder) GetPost(ctx, postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockBlogRepository)(nil).GetPost), ctx, postID)
}

// GetPosts mocks base method.
func (m *MockBlogRepository) GetPosts(ctx context.Context, BlogID uuid.UUID) ([]model.DbPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts", ctx, BlogID)
	ret0, _ := ret[0].([]model.DbPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockBlogRepositoryMockRecorder) GetPosts(ctx, BlogID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockBlogRepository)(nil).GetPosts), ctx, BlogID)
}

// UpdateBlog mocks base method.
func (m *MockBlogRepository) UpdateBlog(ctx context.Context, blog model.DbBlog) (model.DbBlog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlog", ctx, blog)
	ret0, _ := ret[0].(model.DbBlog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBlog indicates an expected call of UpdateBlog.
func (mr *MockBlogRepositoryMockRecorder) UpdateBlog(ctx, blog any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlog", reflect.TypeOf((*MockBlogRepository)(nil).UpdateBlog), ctx, blog)
}

// UpdatePost mocks base method.
func (m *MockBlogRepository) UpdatePost(ctx context.Context, post model.DbPost) (model.DbPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", ctx, post)
	ret0, _ := ret[0].(model.DbPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockBlogRepositoryMockRecorder) UpdatePost(ctx, post any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockBlogRepository)(nil).UpdatePost), ctx, post)
}
